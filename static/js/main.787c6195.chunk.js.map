{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","pokemon","num","s","substr","length","name","english","cleanedName","i","ch","pad","type","map","base","entries","_ref","_ref2","slicedToArray","key","value","react_default","a","createElement","className","alt","src","getImageUrl","width","height","React","Component","CardList","pokemons","cards","src_components_Card","SearchBox","searchField","searchChange","placeholder","onChange","Scroll","style","overflowY","border","children","App","onSearchChange","event","setState","search","target","_this2","fetch","then","response","json","slice","_this3","filteredPokemons","filter","p","toLocaleLowerCase","includes","toLowerCase","components_SearchBox","components_Scroll","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.787c6195.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: props.id,\r\n            pokemon: props.pokemon\r\n        }\r\n        this.id = props.id;\r\n        this.pokemon = props.pokemon;\r\n    }\r\n\r\n    pad(num) {\r\n        var s = \"000\" + num;\r\n        return s.substr(s.length - 3);\r\n    }\r\n\r\n    getImageUrl() {\r\n        let name = this.pokemon.name.english;\r\n        let cleanedName = '';\r\n        for(let i in name) {\r\n            let ch = name[i];\r\n            if((ch>='A'&&ch<='Z')||(ch>='a'&&ch<='z')||(ch>='0'&&ch<='9')) {\r\n                cleanedName += ch;\r\n            }\r\n        }\r\n        // let cleanedChars = name.replace(/[\\u{0080}-\\u{FFFF}]/gu, \"\");\r\n        return 'https://raw.githubusercontent.com/fanzeyi/pokemon.json/master/images/' + this.pad(this.id) + cleanedName + '.png';\r\n    }\r\n\r\n    render() {\r\n        const type = this.pokemon.type.map((i) => {\r\n            return i + ' ';\r\n        })\r\n\r\n        const base = Object.entries(this.pokemon.base).map(([key, value]) => {\r\n            return <p key={key}>{key}: {value}</p>;\r\n        })\r\n\r\n        return (\r\n            <div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5 card'>\r\n                <img alt='Pokemon' src={this.getImageUrl()} width='200' height='200'></img>\r\n                <div>\r\n                    <h2>{this.pokemon.name.english}</h2>\r\n                    <div className='tl'>Type: {type}</div>\r\n                    <hr />\r\n                    <div className='tl'>{base}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ pokemons }) => {\r\n    const cards = pokemons.map((pokemon, i) => {\r\n        return <Card key={pokemons[i].id} id={pokemons[i].id} pokemon={pokemons[i]} />;\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {cards}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                type='search'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                placeholder='Search Pokemons...'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\n// import { pokemons } from './pokemons.js';\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pokemons: [], // pokemons,\r\n            search: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://raw.githubusercontent.com/fanzeyi/pokemon.json/master/pokedex.json')\r\n            .then(response => {\r\n                return response.json();\r\n            }).then(pokemons => {\r\n                this.setState({ pokemons: pokemons.slice(1, 100) });\r\n            });\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ search: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const filteredPokemons = this.state.pokemons.filter(p => {\r\n            return p.name.english.toLocaleLowerCase().includes(this.state.search.toLowerCase());\r\n        });\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <h1>Pokemon Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <CardList pokemons={filteredPokemons} />\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    };\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}